{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemfromcart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'sending...',\n      message: 'Sending Cart data'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-6b4a6.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending Cart Date failed');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'Success',\n        title: 'Success...',\n        message: 'Sent Cart data Successfully'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending Cart data failed'\n      }));\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/vishalimayilsamy/Desktop/Advanced-Redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemfromcart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n    },\n    reducers: {\n        addItemToCart(state, action){\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if(!existingItem){\n                state.items.push({\n                    itemId: newItem.id,\n                     price: newItem.price,\n                     quantity: 1,\n                     totalPrice: newItem.price,\n                     name: newItem.title\n                    });\n            }\n            else{\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemfromcart(state, action) {\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n            state.totalQuantity--;\n            if(existingItem.quantity === 1){\n                state.items = state.items.filter(item => item.id !== id);\n            }\n            else{\n                existingItem.quantity--;\n            }\n        },\n    }\n});\n\nconst sendCartData = (cart) =>{\n    return async (dispatch) => {\n        dispatch(uiActions.showNotification({\n            status: 'pending',\n            title: 'sending...',\n            message: 'Sending Cart data',\n          }))\n\n          const sendRequest = async () =>{\n            const response = await fetch('https://react-http-6b4a6.firebaseio.com/cart.json', {\n                method : 'PUT',\n                body : JSON.stringify(cart),\n               });\n         \n               if(!response.ok){\n                 throw new Error('Sending Cart Date failed');\n               }\n          }\n\n          try{\n         await sendRequest();\n         dispatch(uiActions.showNotification({\n            status: 'Success',\n            title: 'Success...',\n            message: 'Sent Cart data Successfully',\n          }))\n          }catch(error){\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending Cart data failed',\n              }))\n          }\n      \n    };\n}\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}