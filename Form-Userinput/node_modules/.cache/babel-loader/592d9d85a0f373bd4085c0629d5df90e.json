{"ast":null,"code":"var _jsxFileName = \"/Users/vishalimayilsamy/Desktop/Form-Userinput/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  //const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // const [formIsValid, setaFormIsValid] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false; // useEffect(()=>{\n  //   if(enteredNameIsValid){\n  //     setaFormIsValid(true);\n  //   }\n  //   else{\n  //     setaFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid])\n\n  if (enteredNameIsValid && enteredEmailIsInvalid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName); //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n    //nameInputRef.current.value = ''; ==> not possible bcoz it directly manipulated DOM\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef} \n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef} \n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), enteredEmailIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please ensure a valid email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OSCiXnL1hGWugCIqhzzXlcTbZbQ=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/vishalimayilsamy/Desktop/Form-Userinput/src/components/SimpleInput.js"],"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","emailInputChangeHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n\nconst SimpleInput = (props) => {\n\n  //const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched,setEnteredNameTouched] = useState(false);\n // const [formIsValid, setaFormIsValid] = useState(false);\n\n const [enteredEmail, setEnteredEmail] = useState('');\n const [enteredEmailTouched,setEnteredEmailTouched] = useState(false);\n\n \n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  // useEffect(()=>{\n  //   if(enteredNameIsValid){\n  //     setaFormIsValid(true);\n  //   }\n  //   else{\n  //     setaFormIsValid(false);\n  //   }\n\n  // }, [enteredNameIsValid])\n\n  if(enteredNameIsValid && enteredEmailIsInvalid ){\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event =>{\n    setEnteredName(event.target.value);\n  }\n\n  const nameInputBlurHandler = event =>{\n    setEnteredNameTouched(true);\n  }\n\n  const emailInputChangeHandler = event =>{\n    setEnteredEmail(event.target.value);\n  }\n\n  const emailInputBlurHandler = event =>{\n    setEnteredEmailTouched(true);\n  }\n\n\n  const formSubmissionHandler = event =>{\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    if(!enteredNameIsValid){\n      return;\n    }\n\n    console.log(enteredName);\n\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(enteredValue);\n\n   //nameInputRef.current.value = ''; ==> not possible bcoz it directly manipulated DOM\n    setEnteredName('');\n    setEnteredNameTouched(false);\n\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  }\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n       // ref={nameInputRef} \n        type='text' id='name' \n        onChange={nameInputChangeHandler} \n        onBlur = {nameInputBlurHandler}\n        value={enteredName} />\n       { nameInputIsInvalid && <p className=\"error-text\">Name must not be empty!</p> }\n      </div>\n      <div className={nameInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input \n       // ref={nameInputRef} \n        type='email' id='email' \n        onChange={emailInputChangeHandler} \n        onBlur = {emailInputBlurHandler}\n        value={enteredEmail} />\n       { enteredEmailIsInvalid && <p className=\"error-text\">Please ensure a valid email!</p> }\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}